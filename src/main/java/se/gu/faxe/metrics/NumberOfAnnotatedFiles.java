/*************************************************************
 Licensed to the Apache Software Foundation (ASF) under one
 or more contributor license agreements.  See the NOTICE file
 distributed with this work for additional information
 regarding copyright ownership.  The ASF licenses this file
 to you under the Apache License, Version 2.0 (the
 "License"); you may not use this file except in compliance
 with the License.  You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing,
 software distributed under the License is distributed on an
 "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 KIND, either express or implied.  See the License for the
 specific language governing permissions and limitations
 under the License.
 *************************************************************/
package se.gu.faxe.metrics;

import com.scalified.tree.TreeNode;
import se.gu.faxe.Annotation;
import se.gu.faxe.AnnotationFile;
import se.gu.faxe.Asset;
import se.gu.faxe.Feature;

import java.io.File;
import java.io.IOException;
import java.util.List;

/**
 * As defined by Andam, Berima et. al. (2017)
 * Number of File Annotations: total number of file annotations directly referencing the feature
 * ---------------------------------------------------------------------------------------------
 * This metric counts the individual feature to file mappings in the mapping files feature-to-file.
 * That means the pairs of mapping (first file(s) then feature(s)) are counted individually. An
 * Example 1:
 *      file1.java file2.java
 *      FeatureA
 * This causes the following mappings: file1.java -> FeatureA and file2.java -> FeatureA
 * Means for FeatureA, the number of file annotations is 2.
 *
 * Example 2:
 *      file3.java file4.java
 *      FeatureB FeatureC
 * This causes the following mappings: file3.java -> FeatureB, file3.java -> FeatureC,
 * file3.java -> FeatureB and file4.java -> FeatureC
 * Means for FeatureB, the number of file annotations is 2.
 */

public class NumberOfAnnotatedFiles {

    /**
     * Calculate Number of File Annotations: total number of file annotations directly referencing the feature
     * @param fullAssetTree Asset tree generated by FAXE to traverse for metrics
     * @param searchedPath Sub-Tree to search for data
     * @param searchFeature Searched feature name
     * @return Metric Number of File Annotations
     * @throws IOException in case searchedPath does not exist in fullAssetTree.
     */
    public static int calculateNoFA(TreeNode<Asset> fullAssetTree, File searchedPath, Feature searchFeature) throws IOException {
        return calculateNoFA(fullAssetTree, searchedPath, searchFeature, false);
    }


        /**
         * Calculate Number of File Annotations: total number of file annotations directly referencing the feature
         * @param fullAssetTree Asset tree generated by FAXE to traverse for metrics
         * @param searchedPath Sub-Tree to search for data
         * @param searchFeature Searched feature name
         * @param printFoundLocation Enable print to list locations relevant to this metric.
         * @return Metric Number of File Annotations
         * @throws IOException in case searchedPath does not exist in fullAssetTree.
         */
    public static int calculateNoFA(TreeNode<Asset> fullAssetTree, File searchedPath, Feature searchFeature, Boolean printFoundLocation) throws IOException {
        int NoFiA = 0;

        if(!searchedPath.exists()){
            throw new IOException("NumberOfAnnotatedFiles::calculateNoFA ERROR: Given inout path " +searchedPath +" not existing!");
        }

        // Reduce eaList to elements below searchedPath
        TreeNode<Asset> searchRootNode = fullAssetTree.find(new Asset(searchedPath));
        if(searchRootNode==null){
            throw new IOException("NumberOfAnnotatedFiles::calculateNoFA ERROR: Given inout path " +searchedPath +" not existing in fullAssetTree!");
        }

        // Iterate tree and gather information
        for (TreeNode<Asset> node : searchRootNode) {
            List<Annotation> annotationList = node.data().getAnnotationList();

            for (Annotation annotation : annotationList) {
                if (annotation.getClass().equals(AnnotationFile.class)) {
                    if (annotation.getLinkedFeatures().contains(searchFeature)) {
                        NoFiA++;
                        if (printFoundLocation) {
                            System.out.println("   Feature " + searchFeature.toString() + " found in " + node.data().getPath());
                        }
                    }
                }
            }

        }


        return NoFiA;
    }

}
